前面说了，函数套用了一个函数，形成了一个内部函数，我们如何来调用内部的那个函数，现在我们说说内部函数里面的东西，比如变量，
函数里面的变量，乖乖的在函数里面引用就可以了，但是如果这个内部函数还会引用他爹的或者他爹外面变量，要是他爹要被调用的时候呢？这就创建了内部函数的闭包
所以还有一个要搞明白的就是作用域，作用域就是针对函数内部变量的活动范围。作用域的不同，调用父函数的时候，子函数里面的经过处理过的父函数的变量的值是不同的
其实本质是：内部函数引用的外部函数的那个变量，能够被延迟在内存中继续被使用
下面三种情况：1，变量在内部函数（为了对比也列出）2，变量在父函数里面，3，变量在父函数外面
eg1:
function a(){		
	function b(){
    var g =0;
		g++;
	 console.log('g='+ g);
	}
	 return b;
}
console.log('a');
var f=a();
f();// 第一次调用
f();// 第二次再调用
var h=a();
h();// 第一次调用
h();// 第二次再调用
输出结果如下：
a
VM4518:6 g=1
VM4518:6 g=1
VM4518:6 g=1
VM4518:6 g=1
调用a的时候，b里面是啥就是啥，不受外界干扰
eg2:
function a(){
	var g =0;		
	function b(){
		g++;
	 console.log('g='+ g);
	}
	 return b;
}
console.log('a');
var f=a();
f(); // 第一次调用
f(); // 第二次再调用
var h=a(); // 重新开辟一块内存
h();
h();
VM4519:10 a
VM4519:6 g=1
VM4519:6 g=2
VM4519:6 g=1
VM4519:6 g=2
可以看到，调用了一次后，第二次调用外部函数的时候，第一次调用过的时候，内存中父函数的g值发生改变，并用到了下一次父函数被调用
eg3:
再看第三种情况，将变量放在父函数外面
var g =0;
function a(){		
	function b(){
		g++;
	 console.log('g='+ g);
	}
	 return b;
}
console.log('a');
var f=a();
f();
f();
var h=a();
h();
h();
VM4520:9 a
VM4520:5 g=1
VM4520:5 g=2
VM4520:5 g=3
VM4520:5 g=4
在调用父函数的时候，外面的变量的值在内部函数处理之后，保留在内存的g的值不断改变。
总结：
如果将g认为在是开辟内存的某个位置，通过在某个函数作用域的时候有没有再次被使用，就好理解，
第一个，变量在内部函数，改变只改变了一次，
第二个，变量在父类函数，调用时候，有延迟，
第三个，变量在父类外面，调用的时候，重新开辟的也会累加。

需要注意的是，b函数是不能在a外面调用的，如同不能调用a里面的变量一样的道理

